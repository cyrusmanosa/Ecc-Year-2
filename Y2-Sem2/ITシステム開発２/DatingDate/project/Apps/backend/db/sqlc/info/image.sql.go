// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: image.sql

package db

import (
	"context"
)

const createImage = `-- name: CreateImage :one
INSERT INTO image (
    user_id,
    img1,
    img2,
    img3,
    img4,
    img5
) VALUES (
    $1,$2,$3,$4,$5,$6
) RETURNING user_id, img1, img2, img3, img4, img5
`

type CreateImageParams struct {
	UserID int32  `json:"user_id"`
	Img1   []byte `json:"img1"`
	Img2   []byte `json:"img2"`
	Img3   []byte `json:"img3"`
	Img4   []byte `json:"img4"`
	Img5   []byte `json:"img5"`
}

func (q *Queries) CreateImage(ctx context.Context, arg CreateImageParams) (Image, error) {
	row := q.db.QueryRow(ctx, createImage,
		arg.UserID,
		arg.Img1,
		arg.Img2,
		arg.Img3,
		arg.Img4,
		arg.Img5,
	)
	var i Image
	err := row.Scan(
		&i.UserID,
		&i.Img1,
		&i.Img2,
		&i.Img3,
		&i.Img4,
		&i.Img5,
	)
	return i, err
}

const deleteImage = `-- name: DeleteImage :exec
DELETE FROM image 
WHERE user_id = $1
`

func (q *Queries) DeleteImage(ctx context.Context, userID int32) error {
	_, err := q.db.Exec(ctx, deleteImage, userID)
	return err
}

const getUserimageData = `-- name: GetUserimageData :one
SELECT user_id, img1, img2, img3, img4, img5 FROM image
WHERE user_id = $1
`

func (q *Queries) GetUserimageData(ctx context.Context, userID int32) (Image, error) {
	row := q.db.QueryRow(ctx, getUserimageData, userID)
	var i Image
	err := row.Scan(
		&i.UserID,
		&i.Img1,
		&i.Img2,
		&i.Img3,
		&i.Img4,
		&i.Img5,
	)
	return i, err
}

const listimagesList = `-- name: ListimagesList :many
SELECT user_id, img1, img2, img3, img4, img5 FROM image
ORDER BY user_id
`

func (q *Queries) ListimagesList(ctx context.Context) ([]Image, error) {
	rows, err := q.db.Query(ctx, listimagesList)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Image{}
	for rows.Next() {
		var i Image
		if err := rows.Scan(
			&i.UserID,
			&i.Img1,
			&i.Img2,
			&i.Img3,
			&i.Img4,
			&i.Img5,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateImage = `-- name: UpdateImage :one
UPDATE image
SET img1 = $2,
    img2 = $3,
    img3 = $4,
    img4 = $5,
    img5 = $6
WHERE user_id = $1
RETURNING user_id, img1, img2, img3, img4, img5
`

type UpdateImageParams struct {
	UserID int32  `json:"user_id"`
	Img1   []byte `json:"img1"`
	Img2   []byte `json:"img2"`
	Img3   []byte `json:"img3"`
	Img4   []byte `json:"img4"`
	Img5   []byte `json:"img5"`
}

func (q *Queries) UpdateImage(ctx context.Context, arg UpdateImageParams) (Image, error) {
	row := q.db.QueryRow(ctx, updateImage,
		arg.UserID,
		arg.Img1,
		arg.Img2,
		arg.Img3,
		arg.Img4,
		arg.Img5,
	)
	var i Image
	err := row.Scan(
		&i.UserID,
		&i.Img1,
		&i.Img2,
		&i.Img3,
		&i.Img4,
		&i.Img5,
	)
	return i, err
}
