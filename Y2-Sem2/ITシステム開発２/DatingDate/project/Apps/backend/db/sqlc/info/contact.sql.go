// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: contact.sql

package db

import (
	"context"

)

const createContact = `-- name: CreateContact :one
INSERT INTO contact (
    user_id,
    contact_type,
    message,
    status
) VALUES (
    $1,$2,$3,$4
) RETURNING contact_id, user_id, contact_type, message, status, contact_at
`

type CreateContactParams struct {
	UserID      int32       `json:"user_id"`
	ContactType string      `json:"contact_type"`
	Message     string      `json:"message"`
	Status      string `json:"status"`
}

func (q *Queries) CreateContact(ctx context.Context, arg CreateContactParams) (Contact, error) {
	row := q.db.QueryRow(ctx, createContact,
		arg.UserID,
		arg.ContactType,
		arg.Message,
		arg.Status,
	)
	var i Contact
	err := row.Scan(
		&i.ContactID,
		&i.UserID,
		&i.ContactType,
		&i.Message,
		&i.Status,
		&i.ContactAt,
	)
	return i, err
}

const deleteContact = `-- name: DeleteContact :exec
DELETE FROM contact
WHERE contact_id = $1
`

func (q *Queries) DeleteContact(ctx context.Context, contactID int32) error {
	_, err := q.db.Exec(ctx, deleteContact, contactID)
	return err
}

const getUserContactList = `-- name: GetUserContactList :one
SELECT contact_id, user_id, contact_type, message, status, contact_at FROM contact
WHERE contact_id = $1
`

func (q *Queries) GetUserContactList(ctx context.Context, contactID int32) (Contact, error) {
	row := q.db.QueryRow(ctx, getUserContactList, contactID)
	var i Contact
	err := row.Scan(
		&i.ContactID,
		&i.UserID,
		&i.ContactType,
		&i.Message,
		&i.Status,
		&i.ContactAt,
	)
	return i, err
}

const listContact = `-- name: ListContact :many
SELECT contact_id, user_id, contact_type, message, status, contact_at FROM contact
ORDER BY contact_id
`

func (q *Queries) ListContact(ctx context.Context) ([]Contact, error) {
	rows, err := q.db.Query(ctx, listContact)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Contact{}
	for rows.Next() {
		var i Contact
		if err := rows.Scan(
			&i.ContactID,
			&i.UserID,
			&i.ContactType,
			&i.Message,
			&i.Status,
			&i.ContactAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserContact = `-- name: UpdateUserContact :one
UPDATE contact
SET status = $2
WHERE contact_id = $1
RETURNING contact_id, user_id, contact_type, message, status, contact_at
`

type UpdateUserContactParams struct {
	ContactID int32       `json:"contact_id"`
	Status    string `json:"status"`
}

func (q *Queries) UpdateUserContact(ctx context.Context, arg UpdateUserContactParams) (Contact, error) {
	row := q.db.QueryRow(ctx, updateUserContact, arg.ContactID, arg.Status)
	var i Contact
	err := row.Scan(
		&i.ContactID,
		&i.UserID,
		&i.ContactType,
		&i.Message,
		&i.Status,
		&i.ContactAt,
	)
	return i, err
}
