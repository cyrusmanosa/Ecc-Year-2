// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: service_Backend.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Information_LoginUser_FullMethodName             = "/pb.Information/LoginUser"
	Information_CheckEmail_FullMethodName            = "/pb.Information/CheckEmail"
	Information_CheckEmailCode_FullMethodName        = "/pb.Information/CheckEmailCode"
	Information_InputPassword_FullMethodName         = "/pb.Information/InputPassword"
	Information_ResetPassword_FullMethodName         = "/pb.Information/ResetPassword"
	Information_CreateFix_FullMethodName             = "/pb.Information/CreateFix"
	Information_GetFix_FullMethodName                = "/pb.Information/GetFix"
	Information_DeleteFix_FullMethodName             = "/pb.Information/DeleteFix"
	Information_CreateCanChange_FullMethodName       = "/pb.Information/CreateCanChange"
	Information_GetCanChange_FullMethodName          = "/pb.Information/GetCanChange"
	Information_UpdateCanChange_FullMethodName       = "/pb.Information/UpdateCanChange"
	Information_DeleteCanChange_FullMethodName       = "/pb.Information/DeleteCanChange"
	Information_CreateAccompany_FullMethodName       = "/pb.Information/CreateAccompany"
	Information_GetAccompany_FullMethodName          = "/pb.Information/GetAccompany"
	Information_UpdateAccompany_FullMethodName       = "/pb.Information/UpdateAccompany"
	Information_DeleteAccompany_FullMethodName       = "/pb.Information/DeleteAccompany"
	Information_CreateHobby_FullMethodName           = "/pb.Information/CreateHobby"
	Information_GetHobby_FullMethodName              = "/pb.Information/GetHobby"
	Information_UpdateHobby_FullMethodName           = "/pb.Information/UpdateHobby"
	Information_DeleteHobby_FullMethodName           = "/pb.Information/DeleteHobby"
	Information_CreateLover_FullMethodName           = "/pb.Information/CreateLover"
	Information_GetLover_FullMethodName              = "/pb.Information/GetLover"
	Information_UpdateLover_FullMethodName           = "/pb.Information/UpdateLover"
	Information_DeleteLover_FullMethodName           = "/pb.Information/DeleteLover"
	Information_CreateContact_FullMethodName         = "/pb.Information/CreateContact"
	Information_GetContact_FullMethodName            = "/pb.Information/GetContact"
	Information_UpdateContact_FullMethodName         = "/pb.Information/UpdateContact"
	Information_DeleteContact_FullMethodName         = "/pb.Information/DeleteContact"
	Information_CreateTargetList_FullMethodName      = "/pb.Information/CreateTargetList"
	Information_GetTargetList_FullMethodName         = "/pb.Information/GetTargetList"
	Information_UpdateTargetList_FullMethodName      = "/pb.Information/UpdateTargetList"
	Information_DeleteTargetList_FullMethodName      = "/pb.Information/DeleteTargetList"
	Information_CreateChangeTarget_FullMethodName    = "/pb.Information/CreateChangeTarget"
	Information_GetChangeTarget_FullMethodName       = "/pb.Information/GetChangeTarget"
	Information_DeleteChangeTarget_FullMethodName    = "/pb.Information/DeleteChangeTarget"
	Information_CreateImages_FullMethodName          = "/pb.Information/CreateImages"
	Information_GetImages_FullMethodName             = "/pb.Information/GetImages"
	Information_UpdateImages_FullMethodName          = "/pb.Information/UpdateImages"
	Information_DeleteImages_FullMethodName          = "/pb.Information/DeleteImages"
	Information_CreatePayment_FullMethodName         = "/pb.Information/CreatePayment"
	Information_GetPayment_FullMethodName            = "/pb.Information/GetPayment"
	Information_GetUserID_FullMethodName             = "/pb.Information/GetUserID"
	Information_EmailResetPassword_FullMethodName    = "/pb.Information/EmailResetPassword"
	Information_ResetPwEmailConfirm_FullMethodName   = "/pb.Information/ResetPwEmailConfirm"
	Information_SearchTargetHobby_FullMethodName     = "/pb.Information/SearchTargetHobby"
	Information_SearchTargetLover_FullMethodName     = "/pb.Information/SearchTargetLover"
	Information_SearchTargetAccompany_FullMethodName = "/pb.Information/SearchTargetAccompany"
)

// InformationClient is the client API for Information service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InformationClient interface {
	// / Login
	LoginUser(ctx context.Context, in *LoginUserRequest, opts ...grpc.CallOption) (*LoginUserResponse, error)
	// / SignUp
	CheckEmail(ctx context.Context, in *CheckEmailRequest, opts ...grpc.CallOption) (*CheckEmailResponse, error)
	CheckEmailCode(ctx context.Context, in *SendEmailRequest, opts ...grpc.CallOption) (*CheckedEmailResponse, error)
	InputPassword(ctx context.Context, in *InputPasswordRequest, opts ...grpc.CallOption) (*InputPasswordResponse, error)
	// / Reset Password
	ResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...grpc.CallOption) (*ResetPasswordResponse, error)
	// / Fix Information
	CreateFix(ctx context.Context, in *CreateFixRequest, opts ...grpc.CallOption) (*CreateFixResponse, error)
	GetFix(ctx context.Context, in *GetFixRequest, opts ...grpc.CallOption) (*GetFixResponse, error)
	DeleteFix(ctx context.Context, in *DeleteFixRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// / Can Change Information
	CreateCanChange(ctx context.Context, in *CreateCanChangeRequest, opts ...grpc.CallOption) (*CreateCanChangeResponse, error)
	GetCanChange(ctx context.Context, in *GetCanChangeRequest, opts ...grpc.CallOption) (*GetCanChangeResponse, error)
	UpdateCanChange(ctx context.Context, in *UpdateCanChangeRequest, opts ...grpc.CallOption) (*UpdateCanChangeResponse, error)
	DeleteCanChange(ctx context.Context, in *DeleteCanChangeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// / Accompany
	CreateAccompany(ctx context.Context, in *CreateAccompanyRequest, opts ...grpc.CallOption) (*CreateAccompanyResponse, error)
	GetAccompany(ctx context.Context, in *GetAccompanyRequest, opts ...grpc.CallOption) (*GetAccompanyResponse, error)
	UpdateAccompany(ctx context.Context, in *UpdateAccompanyRequest, opts ...grpc.CallOption) (*UpdateAccompanyResponse, error)
	DeleteAccompany(ctx context.Context, in *DeleteAccompanyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Hobby
	CreateHobby(ctx context.Context, in *CreateHobbyRequest, opts ...grpc.CallOption) (*CreateHobbyResponse, error)
	GetHobby(ctx context.Context, in *GetHobbyRequest, opts ...grpc.CallOption) (*GetHobbyResponse, error)
	UpdateHobby(ctx context.Context, in *UpdateHobbyRequest, opts ...grpc.CallOption) (*UpdateHobbyResponse, error)
	DeleteHobby(ctx context.Context, in *DeleteHobbyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Lover
	CreateLover(ctx context.Context, in *CreateLoverRequest, opts ...grpc.CallOption) (*CreateLoverResponse, error)
	GetLover(ctx context.Context, in *GetLoverRequest, opts ...grpc.CallOption) (*GetLoverResponse, error)
	UpdateLover(ctx context.Context, in *UpdateLoverRequest, opts ...grpc.CallOption) (*UpdateLoverResponse, error)
	DeleteLover(ctx context.Context, in *DeleteLoverRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Contact
	CreateContact(ctx context.Context, in *CreateContactRequest, opts ...grpc.CallOption) (*CreateContactResponse, error)
	GetContact(ctx context.Context, in *GetContactRequest, opts ...grpc.CallOption) (*GetContactResponse, error)
	UpdateContact(ctx context.Context, in *UpdateContactRequest, opts ...grpc.CallOption) (*UpdateContactResponse, error)
	DeleteContact(ctx context.Context, in *DeleteContactRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Target List
	CreateTargetList(ctx context.Context, in *CreateTargetListRequest, opts ...grpc.CallOption) (*CreateTargetListResponse, error)
	GetTargetList(ctx context.Context, in *GetTargetListRequest, opts ...grpc.CallOption) (*GetTargetListResponse, error)
	UpdateTargetList(ctx context.Context, in *UpdateTargetListRequest, opts ...grpc.CallOption) (*UpdateTargetListResponse, error)
	DeleteTargetList(ctx context.Context, in *DeleteTargetListRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Change Target
	CreateChangeTarget(ctx context.Context, in *CreateChangeTargetRequest, opts ...grpc.CallOption) (*CreateChangeTargetResponse, error)
	GetChangeTarget(ctx context.Context, in *GetChangeTargetRequest, opts ...grpc.CallOption) (*GetChangeTargetResponse, error)
	DeleteChangeTarget(ctx context.Context, in *DeleteChangeTargetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// images
	CreateImages(ctx context.Context, in *CreateImagesRequest, opts ...grpc.CallOption) (*CreateImagesResponse, error)
	GetImages(ctx context.Context, in *GetImagesRequest, opts ...grpc.CallOption) (*GetImagesResponse, error)
	UpdateImages(ctx context.Context, in *UpdateImagesRequest, opts ...grpc.CallOption) (*UpdateImagesResponse, error)
	DeleteImages(ctx context.Context, in *DeleteImagesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Payment
	CreatePayment(ctx context.Context, in *CreatePaymentRequest, opts ...grpc.CallOption) (*CreatePaymentResponse, error)
	GetPayment(ctx context.Context, in *GetPaymentRequest, opts ...grpc.CallOption) (*GetPaymentResponse, error)
	// Session
	GetUserID(ctx context.Context, in *GetUserIDRequest, opts ...grpc.CallOption) (*GetUserIDResponse, error)
	// Reset Password Email
	EmailResetPassword(ctx context.Context, in *ResetPwEmailRequest, opts ...grpc.CallOption) (*ResetPwEmailResponse, error)
	ResetPwEmailConfirm(ctx context.Context, in *ResetPwEmailConfirmRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// / -------- Search --------------
	SearchTargetHobby(ctx context.Context, in *SearchRequestH, opts ...grpc.CallOption) (*SearchResponseH, error)
	SearchTargetLover(ctx context.Context, in *SearchRequestL, opts ...grpc.CallOption) (*SearchResponseL, error)
	SearchTargetAccompany(ctx context.Context, in *SearchRequestA, opts ...grpc.CallOption) (*SearchResponseA, error)
}

type informationClient struct {
	cc grpc.ClientConnInterface
}

func NewInformationClient(cc grpc.ClientConnInterface) InformationClient {
	return &informationClient{cc}
}

func (c *informationClient) LoginUser(ctx context.Context, in *LoginUserRequest, opts ...grpc.CallOption) (*LoginUserResponse, error) {
	out := new(LoginUserResponse)
	err := c.cc.Invoke(ctx, Information_LoginUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *informationClient) CheckEmail(ctx context.Context, in *CheckEmailRequest, opts ...grpc.CallOption) (*CheckEmailResponse, error) {
	out := new(CheckEmailResponse)
	err := c.cc.Invoke(ctx, Information_CheckEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *informationClient) CheckEmailCode(ctx context.Context, in *SendEmailRequest, opts ...grpc.CallOption) (*CheckedEmailResponse, error) {
	out := new(CheckedEmailResponse)
	err := c.cc.Invoke(ctx, Information_CheckEmailCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *informationClient) InputPassword(ctx context.Context, in *InputPasswordRequest, opts ...grpc.CallOption) (*InputPasswordResponse, error) {
	out := new(InputPasswordResponse)
	err := c.cc.Invoke(ctx, Information_InputPassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *informationClient) ResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...grpc.CallOption) (*ResetPasswordResponse, error) {
	out := new(ResetPasswordResponse)
	err := c.cc.Invoke(ctx, Information_ResetPassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *informationClient) CreateFix(ctx context.Context, in *CreateFixRequest, opts ...grpc.CallOption) (*CreateFixResponse, error) {
	out := new(CreateFixResponse)
	err := c.cc.Invoke(ctx, Information_CreateFix_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *informationClient) GetFix(ctx context.Context, in *GetFixRequest, opts ...grpc.CallOption) (*GetFixResponse, error) {
	out := new(GetFixResponse)
	err := c.cc.Invoke(ctx, Information_GetFix_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *informationClient) DeleteFix(ctx context.Context, in *DeleteFixRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Information_DeleteFix_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *informationClient) CreateCanChange(ctx context.Context, in *CreateCanChangeRequest, opts ...grpc.CallOption) (*CreateCanChangeResponse, error) {
	out := new(CreateCanChangeResponse)
	err := c.cc.Invoke(ctx, Information_CreateCanChange_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *informationClient) GetCanChange(ctx context.Context, in *GetCanChangeRequest, opts ...grpc.CallOption) (*GetCanChangeResponse, error) {
	out := new(GetCanChangeResponse)
	err := c.cc.Invoke(ctx, Information_GetCanChange_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *informationClient) UpdateCanChange(ctx context.Context, in *UpdateCanChangeRequest, opts ...grpc.CallOption) (*UpdateCanChangeResponse, error) {
	out := new(UpdateCanChangeResponse)
	err := c.cc.Invoke(ctx, Information_UpdateCanChange_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *informationClient) DeleteCanChange(ctx context.Context, in *DeleteCanChangeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Information_DeleteCanChange_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *informationClient) CreateAccompany(ctx context.Context, in *CreateAccompanyRequest, opts ...grpc.CallOption) (*CreateAccompanyResponse, error) {
	out := new(CreateAccompanyResponse)
	err := c.cc.Invoke(ctx, Information_CreateAccompany_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *informationClient) GetAccompany(ctx context.Context, in *GetAccompanyRequest, opts ...grpc.CallOption) (*GetAccompanyResponse, error) {
	out := new(GetAccompanyResponse)
	err := c.cc.Invoke(ctx, Information_GetAccompany_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *informationClient) UpdateAccompany(ctx context.Context, in *UpdateAccompanyRequest, opts ...grpc.CallOption) (*UpdateAccompanyResponse, error) {
	out := new(UpdateAccompanyResponse)
	err := c.cc.Invoke(ctx, Information_UpdateAccompany_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *informationClient) DeleteAccompany(ctx context.Context, in *DeleteAccompanyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Information_DeleteAccompany_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *informationClient) CreateHobby(ctx context.Context, in *CreateHobbyRequest, opts ...grpc.CallOption) (*CreateHobbyResponse, error) {
	out := new(CreateHobbyResponse)
	err := c.cc.Invoke(ctx, Information_CreateHobby_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *informationClient) GetHobby(ctx context.Context, in *GetHobbyRequest, opts ...grpc.CallOption) (*GetHobbyResponse, error) {
	out := new(GetHobbyResponse)
	err := c.cc.Invoke(ctx, Information_GetHobby_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *informationClient) UpdateHobby(ctx context.Context, in *UpdateHobbyRequest, opts ...grpc.CallOption) (*UpdateHobbyResponse, error) {
	out := new(UpdateHobbyResponse)
	err := c.cc.Invoke(ctx, Information_UpdateHobby_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *informationClient) DeleteHobby(ctx context.Context, in *DeleteHobbyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Information_DeleteHobby_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *informationClient) CreateLover(ctx context.Context, in *CreateLoverRequest, opts ...grpc.CallOption) (*CreateLoverResponse, error) {
	out := new(CreateLoverResponse)
	err := c.cc.Invoke(ctx, Information_CreateLover_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *informationClient) GetLover(ctx context.Context, in *GetLoverRequest, opts ...grpc.CallOption) (*GetLoverResponse, error) {
	out := new(GetLoverResponse)
	err := c.cc.Invoke(ctx, Information_GetLover_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *informationClient) UpdateLover(ctx context.Context, in *UpdateLoverRequest, opts ...grpc.CallOption) (*UpdateLoverResponse, error) {
	out := new(UpdateLoverResponse)
	err := c.cc.Invoke(ctx, Information_UpdateLover_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *informationClient) DeleteLover(ctx context.Context, in *DeleteLoverRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Information_DeleteLover_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *informationClient) CreateContact(ctx context.Context, in *CreateContactRequest, opts ...grpc.CallOption) (*CreateContactResponse, error) {
	out := new(CreateContactResponse)
	err := c.cc.Invoke(ctx, Information_CreateContact_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *informationClient) GetContact(ctx context.Context, in *GetContactRequest, opts ...grpc.CallOption) (*GetContactResponse, error) {
	out := new(GetContactResponse)
	err := c.cc.Invoke(ctx, Information_GetContact_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *informationClient) UpdateContact(ctx context.Context, in *UpdateContactRequest, opts ...grpc.CallOption) (*UpdateContactResponse, error) {
	out := new(UpdateContactResponse)
	err := c.cc.Invoke(ctx, Information_UpdateContact_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *informationClient) DeleteContact(ctx context.Context, in *DeleteContactRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Information_DeleteContact_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *informationClient) CreateTargetList(ctx context.Context, in *CreateTargetListRequest, opts ...grpc.CallOption) (*CreateTargetListResponse, error) {
	out := new(CreateTargetListResponse)
	err := c.cc.Invoke(ctx, Information_CreateTargetList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *informationClient) GetTargetList(ctx context.Context, in *GetTargetListRequest, opts ...grpc.CallOption) (*GetTargetListResponse, error) {
	out := new(GetTargetListResponse)
	err := c.cc.Invoke(ctx, Information_GetTargetList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *informationClient) UpdateTargetList(ctx context.Context, in *UpdateTargetListRequest, opts ...grpc.CallOption) (*UpdateTargetListResponse, error) {
	out := new(UpdateTargetListResponse)
	err := c.cc.Invoke(ctx, Information_UpdateTargetList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *informationClient) DeleteTargetList(ctx context.Context, in *DeleteTargetListRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Information_DeleteTargetList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *informationClient) CreateChangeTarget(ctx context.Context, in *CreateChangeTargetRequest, opts ...grpc.CallOption) (*CreateChangeTargetResponse, error) {
	out := new(CreateChangeTargetResponse)
	err := c.cc.Invoke(ctx, Information_CreateChangeTarget_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *informationClient) GetChangeTarget(ctx context.Context, in *GetChangeTargetRequest, opts ...grpc.CallOption) (*GetChangeTargetResponse, error) {
	out := new(GetChangeTargetResponse)
	err := c.cc.Invoke(ctx, Information_GetChangeTarget_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *informationClient) DeleteChangeTarget(ctx context.Context, in *DeleteChangeTargetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Information_DeleteChangeTarget_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *informationClient) CreateImages(ctx context.Context, in *CreateImagesRequest, opts ...grpc.CallOption) (*CreateImagesResponse, error) {
	out := new(CreateImagesResponse)
	err := c.cc.Invoke(ctx, Information_CreateImages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *informationClient) GetImages(ctx context.Context, in *GetImagesRequest, opts ...grpc.CallOption) (*GetImagesResponse, error) {
	out := new(GetImagesResponse)
	err := c.cc.Invoke(ctx, Information_GetImages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *informationClient) UpdateImages(ctx context.Context, in *UpdateImagesRequest, opts ...grpc.CallOption) (*UpdateImagesResponse, error) {
	out := new(UpdateImagesResponse)
	err := c.cc.Invoke(ctx, Information_UpdateImages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *informationClient) DeleteImages(ctx context.Context, in *DeleteImagesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Information_DeleteImages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *informationClient) CreatePayment(ctx context.Context, in *CreatePaymentRequest, opts ...grpc.CallOption) (*CreatePaymentResponse, error) {
	out := new(CreatePaymentResponse)
	err := c.cc.Invoke(ctx, Information_CreatePayment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *informationClient) GetPayment(ctx context.Context, in *GetPaymentRequest, opts ...grpc.CallOption) (*GetPaymentResponse, error) {
	out := new(GetPaymentResponse)
	err := c.cc.Invoke(ctx, Information_GetPayment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *informationClient) GetUserID(ctx context.Context, in *GetUserIDRequest, opts ...grpc.CallOption) (*GetUserIDResponse, error) {
	out := new(GetUserIDResponse)
	err := c.cc.Invoke(ctx, Information_GetUserID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *informationClient) EmailResetPassword(ctx context.Context, in *ResetPwEmailRequest, opts ...grpc.CallOption) (*ResetPwEmailResponse, error) {
	out := new(ResetPwEmailResponse)
	err := c.cc.Invoke(ctx, Information_EmailResetPassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *informationClient) ResetPwEmailConfirm(ctx context.Context, in *ResetPwEmailConfirmRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Information_ResetPwEmailConfirm_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *informationClient) SearchTargetHobby(ctx context.Context, in *SearchRequestH, opts ...grpc.CallOption) (*SearchResponseH, error) {
	out := new(SearchResponseH)
	err := c.cc.Invoke(ctx, Information_SearchTargetHobby_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *informationClient) SearchTargetLover(ctx context.Context, in *SearchRequestL, opts ...grpc.CallOption) (*SearchResponseL, error) {
	out := new(SearchResponseL)
	err := c.cc.Invoke(ctx, Information_SearchTargetLover_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *informationClient) SearchTargetAccompany(ctx context.Context, in *SearchRequestA, opts ...grpc.CallOption) (*SearchResponseA, error) {
	out := new(SearchResponseA)
	err := c.cc.Invoke(ctx, Information_SearchTargetAccompany_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InformationServer is the server API for Information service.
// All implementations must embed UnimplementedInformationServer
// for forward compatibility
type InformationServer interface {
	// / Login
	LoginUser(context.Context, *LoginUserRequest) (*LoginUserResponse, error)
	// / SignUp
	CheckEmail(context.Context, *CheckEmailRequest) (*CheckEmailResponse, error)
	CheckEmailCode(context.Context, *SendEmailRequest) (*CheckedEmailResponse, error)
	InputPassword(context.Context, *InputPasswordRequest) (*InputPasswordResponse, error)
	// / Reset Password
	ResetPassword(context.Context, *ResetPasswordRequest) (*ResetPasswordResponse, error)
	// / Fix Information
	CreateFix(context.Context, *CreateFixRequest) (*CreateFixResponse, error)
	GetFix(context.Context, *GetFixRequest) (*GetFixResponse, error)
	DeleteFix(context.Context, *DeleteFixRequest) (*emptypb.Empty, error)
	// / Can Change Information
	CreateCanChange(context.Context, *CreateCanChangeRequest) (*CreateCanChangeResponse, error)
	GetCanChange(context.Context, *GetCanChangeRequest) (*GetCanChangeResponse, error)
	UpdateCanChange(context.Context, *UpdateCanChangeRequest) (*UpdateCanChangeResponse, error)
	DeleteCanChange(context.Context, *DeleteCanChangeRequest) (*emptypb.Empty, error)
	// / Accompany
	CreateAccompany(context.Context, *CreateAccompanyRequest) (*CreateAccompanyResponse, error)
	GetAccompany(context.Context, *GetAccompanyRequest) (*GetAccompanyResponse, error)
	UpdateAccompany(context.Context, *UpdateAccompanyRequest) (*UpdateAccompanyResponse, error)
	DeleteAccompany(context.Context, *DeleteAccompanyRequest) (*emptypb.Empty, error)
	// Hobby
	CreateHobby(context.Context, *CreateHobbyRequest) (*CreateHobbyResponse, error)
	GetHobby(context.Context, *GetHobbyRequest) (*GetHobbyResponse, error)
	UpdateHobby(context.Context, *UpdateHobbyRequest) (*UpdateHobbyResponse, error)
	DeleteHobby(context.Context, *DeleteHobbyRequest) (*emptypb.Empty, error)
	// Lover
	CreateLover(context.Context, *CreateLoverRequest) (*CreateLoverResponse, error)
	GetLover(context.Context, *GetLoverRequest) (*GetLoverResponse, error)
	UpdateLover(context.Context, *UpdateLoverRequest) (*UpdateLoverResponse, error)
	DeleteLover(context.Context, *DeleteLoverRequest) (*emptypb.Empty, error)
	// Contact
	CreateContact(context.Context, *CreateContactRequest) (*CreateContactResponse, error)
	GetContact(context.Context, *GetContactRequest) (*GetContactResponse, error)
	UpdateContact(context.Context, *UpdateContactRequest) (*UpdateContactResponse, error)
	DeleteContact(context.Context, *DeleteContactRequest) (*emptypb.Empty, error)
	// Target List
	CreateTargetList(context.Context, *CreateTargetListRequest) (*CreateTargetListResponse, error)
	GetTargetList(context.Context, *GetTargetListRequest) (*GetTargetListResponse, error)
	UpdateTargetList(context.Context, *UpdateTargetListRequest) (*UpdateTargetListResponse, error)
	DeleteTargetList(context.Context, *DeleteTargetListRequest) (*emptypb.Empty, error)
	// Change Target
	CreateChangeTarget(context.Context, *CreateChangeTargetRequest) (*CreateChangeTargetResponse, error)
	GetChangeTarget(context.Context, *GetChangeTargetRequest) (*GetChangeTargetResponse, error)
	DeleteChangeTarget(context.Context, *DeleteChangeTargetRequest) (*emptypb.Empty, error)
	// images
	CreateImages(context.Context, *CreateImagesRequest) (*CreateImagesResponse, error)
	GetImages(context.Context, *GetImagesRequest) (*GetImagesResponse, error)
	UpdateImages(context.Context, *UpdateImagesRequest) (*UpdateImagesResponse, error)
	DeleteImages(context.Context, *DeleteImagesRequest) (*emptypb.Empty, error)
	// Payment
	CreatePayment(context.Context, *CreatePaymentRequest) (*CreatePaymentResponse, error)
	GetPayment(context.Context, *GetPaymentRequest) (*GetPaymentResponse, error)
	// Session
	GetUserID(context.Context, *GetUserIDRequest) (*GetUserIDResponse, error)
	// Reset Password Email
	EmailResetPassword(context.Context, *ResetPwEmailRequest) (*ResetPwEmailResponse, error)
	ResetPwEmailConfirm(context.Context, *ResetPwEmailConfirmRequest) (*emptypb.Empty, error)
	// / -------- Search --------------
	SearchTargetHobby(context.Context, *SearchRequestH) (*SearchResponseH, error)
	SearchTargetLover(context.Context, *SearchRequestL) (*SearchResponseL, error)
	SearchTargetAccompany(context.Context, *SearchRequestA) (*SearchResponseA, error)
	mustEmbedUnimplementedInformationServer()
}

// UnimplementedInformationServer must be embedded to have forward compatible implementations.
type UnimplementedInformationServer struct {
}

func (UnimplementedInformationServer) LoginUser(context.Context, *LoginUserRequest) (*LoginUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginUser not implemented")
}
func (UnimplementedInformationServer) CheckEmail(context.Context, *CheckEmailRequest) (*CheckEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckEmail not implemented")
}
func (UnimplementedInformationServer) CheckEmailCode(context.Context, *SendEmailRequest) (*CheckedEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckEmailCode not implemented")
}
func (UnimplementedInformationServer) InputPassword(context.Context, *InputPasswordRequest) (*InputPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InputPassword not implemented")
}
func (UnimplementedInformationServer) ResetPassword(context.Context, *ResetPasswordRequest) (*ResetPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPassword not implemented")
}
func (UnimplementedInformationServer) CreateFix(context.Context, *CreateFixRequest) (*CreateFixResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFix not implemented")
}
func (UnimplementedInformationServer) GetFix(context.Context, *GetFixRequest) (*GetFixResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFix not implemented")
}
func (UnimplementedInformationServer) DeleteFix(context.Context, *DeleteFixRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFix not implemented")
}
func (UnimplementedInformationServer) CreateCanChange(context.Context, *CreateCanChangeRequest) (*CreateCanChangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCanChange not implemented")
}
func (UnimplementedInformationServer) GetCanChange(context.Context, *GetCanChangeRequest) (*GetCanChangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCanChange not implemented")
}
func (UnimplementedInformationServer) UpdateCanChange(context.Context, *UpdateCanChangeRequest) (*UpdateCanChangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCanChange not implemented")
}
func (UnimplementedInformationServer) DeleteCanChange(context.Context, *DeleteCanChangeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCanChange not implemented")
}
func (UnimplementedInformationServer) CreateAccompany(context.Context, *CreateAccompanyRequest) (*CreateAccompanyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccompany not implemented")
}
func (UnimplementedInformationServer) GetAccompany(context.Context, *GetAccompanyRequest) (*GetAccompanyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccompany not implemented")
}
func (UnimplementedInformationServer) UpdateAccompany(context.Context, *UpdateAccompanyRequest) (*UpdateAccompanyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccompany not implemented")
}
func (UnimplementedInformationServer) DeleteAccompany(context.Context, *DeleteAccompanyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccompany not implemented")
}
func (UnimplementedInformationServer) CreateHobby(context.Context, *CreateHobbyRequest) (*CreateHobbyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHobby not implemented")
}
func (UnimplementedInformationServer) GetHobby(context.Context, *GetHobbyRequest) (*GetHobbyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHobby not implemented")
}
func (UnimplementedInformationServer) UpdateHobby(context.Context, *UpdateHobbyRequest) (*UpdateHobbyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHobby not implemented")
}
func (UnimplementedInformationServer) DeleteHobby(context.Context, *DeleteHobbyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHobby not implemented")
}
func (UnimplementedInformationServer) CreateLover(context.Context, *CreateLoverRequest) (*CreateLoverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLover not implemented")
}
func (UnimplementedInformationServer) GetLover(context.Context, *GetLoverRequest) (*GetLoverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLover not implemented")
}
func (UnimplementedInformationServer) UpdateLover(context.Context, *UpdateLoverRequest) (*UpdateLoverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLover not implemented")
}
func (UnimplementedInformationServer) DeleteLover(context.Context, *DeleteLoverRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLover not implemented")
}
func (UnimplementedInformationServer) CreateContact(context.Context, *CreateContactRequest) (*CreateContactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateContact not implemented")
}
func (UnimplementedInformationServer) GetContact(context.Context, *GetContactRequest) (*GetContactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContact not implemented")
}
func (UnimplementedInformationServer) UpdateContact(context.Context, *UpdateContactRequest) (*UpdateContactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateContact not implemented")
}
func (UnimplementedInformationServer) DeleteContact(context.Context, *DeleteContactRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteContact not implemented")
}
func (UnimplementedInformationServer) CreateTargetList(context.Context, *CreateTargetListRequest) (*CreateTargetListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTargetList not implemented")
}
func (UnimplementedInformationServer) GetTargetList(context.Context, *GetTargetListRequest) (*GetTargetListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTargetList not implemented")
}
func (UnimplementedInformationServer) UpdateTargetList(context.Context, *UpdateTargetListRequest) (*UpdateTargetListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTargetList not implemented")
}
func (UnimplementedInformationServer) DeleteTargetList(context.Context, *DeleteTargetListRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTargetList not implemented")
}
func (UnimplementedInformationServer) CreateChangeTarget(context.Context, *CreateChangeTargetRequest) (*CreateChangeTargetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChangeTarget not implemented")
}
func (UnimplementedInformationServer) GetChangeTarget(context.Context, *GetChangeTargetRequest) (*GetChangeTargetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChangeTarget not implemented")
}
func (UnimplementedInformationServer) DeleteChangeTarget(context.Context, *DeleteChangeTargetRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChangeTarget not implemented")
}
func (UnimplementedInformationServer) CreateImages(context.Context, *CreateImagesRequest) (*CreateImagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateImages not implemented")
}
func (UnimplementedInformationServer) GetImages(context.Context, *GetImagesRequest) (*GetImagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImages not implemented")
}
func (UnimplementedInformationServer) UpdateImages(context.Context, *UpdateImagesRequest) (*UpdateImagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateImages not implemented")
}
func (UnimplementedInformationServer) DeleteImages(context.Context, *DeleteImagesRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteImages not implemented")
}
func (UnimplementedInformationServer) CreatePayment(context.Context, *CreatePaymentRequest) (*CreatePaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePayment not implemented")
}
func (UnimplementedInformationServer) GetPayment(context.Context, *GetPaymentRequest) (*GetPaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPayment not implemented")
}
func (UnimplementedInformationServer) GetUserID(context.Context, *GetUserIDRequest) (*GetUserIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserID not implemented")
}
func (UnimplementedInformationServer) EmailResetPassword(context.Context, *ResetPwEmailRequest) (*ResetPwEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmailResetPassword not implemented")
}
func (UnimplementedInformationServer) ResetPwEmailConfirm(context.Context, *ResetPwEmailConfirmRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPwEmailConfirm not implemented")
}
func (UnimplementedInformationServer) SearchTargetHobby(context.Context, *SearchRequestH) (*SearchResponseH, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchTargetHobby not implemented")
}
func (UnimplementedInformationServer) SearchTargetLover(context.Context, *SearchRequestL) (*SearchResponseL, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchTargetLover not implemented")
}
func (UnimplementedInformationServer) SearchTargetAccompany(context.Context, *SearchRequestA) (*SearchResponseA, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchTargetAccompany not implemented")
}
func (UnimplementedInformationServer) mustEmbedUnimplementedInformationServer() {}

// UnsafeInformationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InformationServer will
// result in compilation errors.
type UnsafeInformationServer interface {
	mustEmbedUnimplementedInformationServer()
}

func RegisterInformationServer(s grpc.ServiceRegistrar, srv InformationServer) {
	s.RegisterService(&Information_ServiceDesc, srv)
}

func _Information_LoginUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InformationServer).LoginUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Information_LoginUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InformationServer).LoginUser(ctx, req.(*LoginUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Information_CheckEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InformationServer).CheckEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Information_CheckEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InformationServer).CheckEmail(ctx, req.(*CheckEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Information_CheckEmailCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InformationServer).CheckEmailCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Information_CheckEmailCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InformationServer).CheckEmailCode(ctx, req.(*SendEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Information_InputPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InputPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InformationServer).InputPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Information_InputPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InformationServer).InputPassword(ctx, req.(*InputPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Information_ResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InformationServer).ResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Information_ResetPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InformationServer).ResetPassword(ctx, req.(*ResetPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Information_CreateFix_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFixRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InformationServer).CreateFix(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Information_CreateFix_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InformationServer).CreateFix(ctx, req.(*CreateFixRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Information_GetFix_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFixRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InformationServer).GetFix(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Information_GetFix_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InformationServer).GetFix(ctx, req.(*GetFixRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Information_DeleteFix_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFixRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InformationServer).DeleteFix(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Information_DeleteFix_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InformationServer).DeleteFix(ctx, req.(*DeleteFixRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Information_CreateCanChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCanChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InformationServer).CreateCanChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Information_CreateCanChange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InformationServer).CreateCanChange(ctx, req.(*CreateCanChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Information_GetCanChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCanChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InformationServer).GetCanChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Information_GetCanChange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InformationServer).GetCanChange(ctx, req.(*GetCanChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Information_UpdateCanChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCanChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InformationServer).UpdateCanChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Information_UpdateCanChange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InformationServer).UpdateCanChange(ctx, req.(*UpdateCanChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Information_DeleteCanChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCanChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InformationServer).DeleteCanChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Information_DeleteCanChange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InformationServer).DeleteCanChange(ctx, req.(*DeleteCanChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Information_CreateAccompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccompanyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InformationServer).CreateAccompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Information_CreateAccompany_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InformationServer).CreateAccompany(ctx, req.(*CreateAccompanyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Information_GetAccompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccompanyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InformationServer).GetAccompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Information_GetAccompany_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InformationServer).GetAccompany(ctx, req.(*GetAccompanyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Information_UpdateAccompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAccompanyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InformationServer).UpdateAccompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Information_UpdateAccompany_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InformationServer).UpdateAccompany(ctx, req.(*UpdateAccompanyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Information_DeleteAccompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAccompanyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InformationServer).DeleteAccompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Information_DeleteAccompany_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InformationServer).DeleteAccompany(ctx, req.(*DeleteAccompanyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Information_CreateHobby_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHobbyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InformationServer).CreateHobby(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Information_CreateHobby_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InformationServer).CreateHobby(ctx, req.(*CreateHobbyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Information_GetHobby_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHobbyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InformationServer).GetHobby(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Information_GetHobby_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InformationServer).GetHobby(ctx, req.(*GetHobbyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Information_UpdateHobby_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHobbyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InformationServer).UpdateHobby(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Information_UpdateHobby_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InformationServer).UpdateHobby(ctx, req.(*UpdateHobbyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Information_DeleteHobby_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHobbyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InformationServer).DeleteHobby(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Information_DeleteHobby_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InformationServer).DeleteHobby(ctx, req.(*DeleteHobbyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Information_CreateLover_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLoverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InformationServer).CreateLover(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Information_CreateLover_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InformationServer).CreateLover(ctx, req.(*CreateLoverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Information_GetLover_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLoverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InformationServer).GetLover(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Information_GetLover_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InformationServer).GetLover(ctx, req.(*GetLoverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Information_UpdateLover_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLoverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InformationServer).UpdateLover(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Information_UpdateLover_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InformationServer).UpdateLover(ctx, req.(*UpdateLoverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Information_DeleteLover_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLoverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InformationServer).DeleteLover(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Information_DeleteLover_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InformationServer).DeleteLover(ctx, req.(*DeleteLoverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Information_CreateContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InformationServer).CreateContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Information_CreateContact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InformationServer).CreateContact(ctx, req.(*CreateContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Information_GetContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InformationServer).GetContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Information_GetContact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InformationServer).GetContact(ctx, req.(*GetContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Information_UpdateContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InformationServer).UpdateContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Information_UpdateContact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InformationServer).UpdateContact(ctx, req.(*UpdateContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Information_DeleteContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InformationServer).DeleteContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Information_DeleteContact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InformationServer).DeleteContact(ctx, req.(*DeleteContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Information_CreateTargetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTargetListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InformationServer).CreateTargetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Information_CreateTargetList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InformationServer).CreateTargetList(ctx, req.(*CreateTargetListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Information_GetTargetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTargetListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InformationServer).GetTargetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Information_GetTargetList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InformationServer).GetTargetList(ctx, req.(*GetTargetListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Information_UpdateTargetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTargetListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InformationServer).UpdateTargetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Information_UpdateTargetList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InformationServer).UpdateTargetList(ctx, req.(*UpdateTargetListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Information_DeleteTargetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTargetListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InformationServer).DeleteTargetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Information_DeleteTargetList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InformationServer).DeleteTargetList(ctx, req.(*DeleteTargetListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Information_CreateChangeTarget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChangeTargetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InformationServer).CreateChangeTarget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Information_CreateChangeTarget_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InformationServer).CreateChangeTarget(ctx, req.(*CreateChangeTargetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Information_GetChangeTarget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChangeTargetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InformationServer).GetChangeTarget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Information_GetChangeTarget_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InformationServer).GetChangeTarget(ctx, req.(*GetChangeTargetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Information_DeleteChangeTarget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteChangeTargetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InformationServer).DeleteChangeTarget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Information_DeleteChangeTarget_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InformationServer).DeleteChangeTarget(ctx, req.(*DeleteChangeTargetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Information_CreateImages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateImagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InformationServer).CreateImages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Information_CreateImages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InformationServer).CreateImages(ctx, req.(*CreateImagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Information_GetImages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetImagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InformationServer).GetImages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Information_GetImages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InformationServer).GetImages(ctx, req.(*GetImagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Information_UpdateImages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateImagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InformationServer).UpdateImages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Information_UpdateImages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InformationServer).UpdateImages(ctx, req.(*UpdateImagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Information_DeleteImages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteImagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InformationServer).DeleteImages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Information_DeleteImages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InformationServer).DeleteImages(ctx, req.(*DeleteImagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Information_CreatePayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InformationServer).CreatePayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Information_CreatePayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InformationServer).CreatePayment(ctx, req.(*CreatePaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Information_GetPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InformationServer).GetPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Information_GetPayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InformationServer).GetPayment(ctx, req.(*GetPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Information_GetUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InformationServer).GetUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Information_GetUserID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InformationServer).GetUserID(ctx, req.(*GetUserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Information_EmailResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPwEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InformationServer).EmailResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Information_EmailResetPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InformationServer).EmailResetPassword(ctx, req.(*ResetPwEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Information_ResetPwEmailConfirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPwEmailConfirmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InformationServer).ResetPwEmailConfirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Information_ResetPwEmailConfirm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InformationServer).ResetPwEmailConfirm(ctx, req.(*ResetPwEmailConfirmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Information_SearchTargetHobby_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequestH)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InformationServer).SearchTargetHobby(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Information_SearchTargetHobby_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InformationServer).SearchTargetHobby(ctx, req.(*SearchRequestH))
	}
	return interceptor(ctx, in, info, handler)
}

func _Information_SearchTargetLover_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequestL)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InformationServer).SearchTargetLover(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Information_SearchTargetLover_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InformationServer).SearchTargetLover(ctx, req.(*SearchRequestL))
	}
	return interceptor(ctx, in, info, handler)
}

func _Information_SearchTargetAccompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequestA)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InformationServer).SearchTargetAccompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Information_SearchTargetAccompany_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InformationServer).SearchTargetAccompany(ctx, req.(*SearchRequestA))
	}
	return interceptor(ctx, in, info, handler)
}

// Information_ServiceDesc is the grpc.ServiceDesc for Information service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Information_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Information",
	HandlerType: (*InformationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LoginUser",
			Handler:    _Information_LoginUser_Handler,
		},
		{
			MethodName: "CheckEmail",
			Handler:    _Information_CheckEmail_Handler,
		},
		{
			MethodName: "CheckEmailCode",
			Handler:    _Information_CheckEmailCode_Handler,
		},
		{
			MethodName: "InputPassword",
			Handler:    _Information_InputPassword_Handler,
		},
		{
			MethodName: "ResetPassword",
			Handler:    _Information_ResetPassword_Handler,
		},
		{
			MethodName: "CreateFix",
			Handler:    _Information_CreateFix_Handler,
		},
		{
			MethodName: "GetFix",
			Handler:    _Information_GetFix_Handler,
		},
		{
			MethodName: "DeleteFix",
			Handler:    _Information_DeleteFix_Handler,
		},
		{
			MethodName: "CreateCanChange",
			Handler:    _Information_CreateCanChange_Handler,
		},
		{
			MethodName: "GetCanChange",
			Handler:    _Information_GetCanChange_Handler,
		},
		{
			MethodName: "UpdateCanChange",
			Handler:    _Information_UpdateCanChange_Handler,
		},
		{
			MethodName: "DeleteCanChange",
			Handler:    _Information_DeleteCanChange_Handler,
		},
		{
			MethodName: "CreateAccompany",
			Handler:    _Information_CreateAccompany_Handler,
		},
		{
			MethodName: "GetAccompany",
			Handler:    _Information_GetAccompany_Handler,
		},
		{
			MethodName: "UpdateAccompany",
			Handler:    _Information_UpdateAccompany_Handler,
		},
		{
			MethodName: "DeleteAccompany",
			Handler:    _Information_DeleteAccompany_Handler,
		},
		{
			MethodName: "CreateHobby",
			Handler:    _Information_CreateHobby_Handler,
		},
		{
			MethodName: "GetHobby",
			Handler:    _Information_GetHobby_Handler,
		},
		{
			MethodName: "UpdateHobby",
			Handler:    _Information_UpdateHobby_Handler,
		},
		{
			MethodName: "DeleteHobby",
			Handler:    _Information_DeleteHobby_Handler,
		},
		{
			MethodName: "CreateLover",
			Handler:    _Information_CreateLover_Handler,
		},
		{
			MethodName: "GetLover",
			Handler:    _Information_GetLover_Handler,
		},
		{
			MethodName: "UpdateLover",
			Handler:    _Information_UpdateLover_Handler,
		},
		{
			MethodName: "DeleteLover",
			Handler:    _Information_DeleteLover_Handler,
		},
		{
			MethodName: "CreateContact",
			Handler:    _Information_CreateContact_Handler,
		},
		{
			MethodName: "GetContact",
			Handler:    _Information_GetContact_Handler,
		},
		{
			MethodName: "UpdateContact",
			Handler:    _Information_UpdateContact_Handler,
		},
		{
			MethodName: "DeleteContact",
			Handler:    _Information_DeleteContact_Handler,
		},
		{
			MethodName: "CreateTargetList",
			Handler:    _Information_CreateTargetList_Handler,
		},
		{
			MethodName: "GetTargetList",
			Handler:    _Information_GetTargetList_Handler,
		},
		{
			MethodName: "UpdateTargetList",
			Handler:    _Information_UpdateTargetList_Handler,
		},
		{
			MethodName: "DeleteTargetList",
			Handler:    _Information_DeleteTargetList_Handler,
		},
		{
			MethodName: "CreateChangeTarget",
			Handler:    _Information_CreateChangeTarget_Handler,
		},
		{
			MethodName: "GetChangeTarget",
			Handler:    _Information_GetChangeTarget_Handler,
		},
		{
			MethodName: "DeleteChangeTarget",
			Handler:    _Information_DeleteChangeTarget_Handler,
		},
		{
			MethodName: "CreateImages",
			Handler:    _Information_CreateImages_Handler,
		},
		{
			MethodName: "GetImages",
			Handler:    _Information_GetImages_Handler,
		},
		{
			MethodName: "UpdateImages",
			Handler:    _Information_UpdateImages_Handler,
		},
		{
			MethodName: "DeleteImages",
			Handler:    _Information_DeleteImages_Handler,
		},
		{
			MethodName: "CreatePayment",
			Handler:    _Information_CreatePayment_Handler,
		},
		{
			MethodName: "GetPayment",
			Handler:    _Information_GetPayment_Handler,
		},
		{
			MethodName: "GetUserID",
			Handler:    _Information_GetUserID_Handler,
		},
		{
			MethodName: "EmailResetPassword",
			Handler:    _Information_EmailResetPassword_Handler,
		},
		{
			MethodName: "ResetPwEmailConfirm",
			Handler:    _Information_ResetPwEmailConfirm_Handler,
		},
		{
			MethodName: "SearchTargetHobby",
			Handler:    _Information_SearchTargetHobby_Handler,
		},
		{
			MethodName: "SearchTargetLover",
			Handler:    _Information_SearchTargetLover_Handler,
		},
		{
			MethodName: "SearchTargetAccompany",
			Handler:    _Information_SearchTargetAccompany_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_Backend.proto",
}

const (
	Chat_CreateChatTable_FullMethodName   = "/pb.Chat/CreateChatTable"
	Chat_CreateChatRecord_FullMethodName  = "/pb.Chat/CreateChatRecord"
	Chat_GetChatRecord_FullMethodName     = "/pb.Chat/GetChatRecord"
	Chat_UpdateChatRecord_FullMethodName  = "/pb.Chat/UpdateChatRecord"
	Chat_DeleteChatTable_FullMethodName   = "/pb.Chat/DeleteChatTable"
	Chat_GetTargetID_FullMethodName       = "/pb.Chat/GetTargetID"
	Chat_GetLastMsg_FullMethodName        = "/pb.Chat/GetLastMsg"
	Chat_GetChatRow_FullMethodName        = "/pb.Chat/GetChatRow"
	Chat_UpdateRead_FullMethodName        = "/pb.Chat/UpdateRead"
	Chat_CreateSocialMedia_FullMethodName = "/pb.Chat/CreateSocialMedia"
	Chat_UpdateSocialMedia_FullMethodName = "/pb.Chat/UpdateSocialMedia"
	Chat_GetSocialMedia_FullMethodName    = "/pb.Chat/GetSocialMedia"
	Chat_DeleteSocialMedia_FullMethodName = "/pb.Chat/DeleteSocialMedia"
)

// ChatClient is the client API for Chat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatClient interface {
	CreateChatTable(ctx context.Context, in *CreateChatTableRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateChatRecord(ctx context.Context, in *CreateChatRecordRequest, opts ...grpc.CallOption) (*CreateChatRecordResponse, error)
	GetChatRecord(ctx context.Context, in *GetChatRecordRequest, opts ...grpc.CallOption) (*GetChatRecordResponse, error)
	UpdateChatRecord(ctx context.Context, in *UpdateChatRecordRequest, opts ...grpc.CallOption) (*UpdateChatRecordResponse, error)
	DeleteChatTable(ctx context.Context, in *DeleteChatTableRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetTargetID(ctx context.Context, in *GetTargetIDRequest, opts ...grpc.CallOption) (*GetTargetIDResponse, error)
	GetLastMsg(ctx context.Context, in *GetLastMsgRequest, opts ...grpc.CallOption) (*GetLastMsgResponse, error)
	GetChatRow(ctx context.Context, in *GetChatRowRequest, opts ...grpc.CallOption) (*GetChatRowResponse, error)
	UpdateRead(ctx context.Context, in *UpdateReadRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateSocialMedia(ctx context.Context, in *CreateSocialMediaRequest, opts ...grpc.CallOption) (*CreateSocialMediaResponse, error)
	UpdateSocialMedia(ctx context.Context, in *UpdateSocialMediaRequest, opts ...grpc.CallOption) (*UpdateSocialMediaResponse, error)
	GetSocialMedia(ctx context.Context, in *GetSocialMediaRequest, opts ...grpc.CallOption) (*GetSocialMediaResponse, error)
	DeleteSocialMedia(ctx context.Context, in *DeleteSocialMediaRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type chatClient struct {
	cc grpc.ClientConnInterface
}

func NewChatClient(cc grpc.ClientConnInterface) ChatClient {
	return &chatClient{cc}
}

func (c *chatClient) CreateChatTable(ctx context.Context, in *CreateChatTableRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Chat_CreateChatTable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) CreateChatRecord(ctx context.Context, in *CreateChatRecordRequest, opts ...grpc.CallOption) (*CreateChatRecordResponse, error) {
	out := new(CreateChatRecordResponse)
	err := c.cc.Invoke(ctx, Chat_CreateChatRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) GetChatRecord(ctx context.Context, in *GetChatRecordRequest, opts ...grpc.CallOption) (*GetChatRecordResponse, error) {
	out := new(GetChatRecordResponse)
	err := c.cc.Invoke(ctx, Chat_GetChatRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) UpdateChatRecord(ctx context.Context, in *UpdateChatRecordRequest, opts ...grpc.CallOption) (*UpdateChatRecordResponse, error) {
	out := new(UpdateChatRecordResponse)
	err := c.cc.Invoke(ctx, Chat_UpdateChatRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) DeleteChatTable(ctx context.Context, in *DeleteChatTableRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Chat_DeleteChatTable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) GetTargetID(ctx context.Context, in *GetTargetIDRequest, opts ...grpc.CallOption) (*GetTargetIDResponse, error) {
	out := new(GetTargetIDResponse)
	err := c.cc.Invoke(ctx, Chat_GetTargetID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) GetLastMsg(ctx context.Context, in *GetLastMsgRequest, opts ...grpc.CallOption) (*GetLastMsgResponse, error) {
	out := new(GetLastMsgResponse)
	err := c.cc.Invoke(ctx, Chat_GetLastMsg_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) GetChatRow(ctx context.Context, in *GetChatRowRequest, opts ...grpc.CallOption) (*GetChatRowResponse, error) {
	out := new(GetChatRowResponse)
	err := c.cc.Invoke(ctx, Chat_GetChatRow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) UpdateRead(ctx context.Context, in *UpdateReadRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Chat_UpdateRead_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) CreateSocialMedia(ctx context.Context, in *CreateSocialMediaRequest, opts ...grpc.CallOption) (*CreateSocialMediaResponse, error) {
	out := new(CreateSocialMediaResponse)
	err := c.cc.Invoke(ctx, Chat_CreateSocialMedia_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) UpdateSocialMedia(ctx context.Context, in *UpdateSocialMediaRequest, opts ...grpc.CallOption) (*UpdateSocialMediaResponse, error) {
	out := new(UpdateSocialMediaResponse)
	err := c.cc.Invoke(ctx, Chat_UpdateSocialMedia_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) GetSocialMedia(ctx context.Context, in *GetSocialMediaRequest, opts ...grpc.CallOption) (*GetSocialMediaResponse, error) {
	out := new(GetSocialMediaResponse)
	err := c.cc.Invoke(ctx, Chat_GetSocialMedia_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) DeleteSocialMedia(ctx context.Context, in *DeleteSocialMediaRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Chat_DeleteSocialMedia_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatServer is the server API for Chat service.
// All implementations must embed UnimplementedChatServer
// for forward compatibility
type ChatServer interface {
	CreateChatTable(context.Context, *CreateChatTableRequest) (*emptypb.Empty, error)
	CreateChatRecord(context.Context, *CreateChatRecordRequest) (*CreateChatRecordResponse, error)
	GetChatRecord(context.Context, *GetChatRecordRequest) (*GetChatRecordResponse, error)
	UpdateChatRecord(context.Context, *UpdateChatRecordRequest) (*UpdateChatRecordResponse, error)
	DeleteChatTable(context.Context, *DeleteChatTableRequest) (*emptypb.Empty, error)
	GetTargetID(context.Context, *GetTargetIDRequest) (*GetTargetIDResponse, error)
	GetLastMsg(context.Context, *GetLastMsgRequest) (*GetLastMsgResponse, error)
	GetChatRow(context.Context, *GetChatRowRequest) (*GetChatRowResponse, error)
	UpdateRead(context.Context, *UpdateReadRequest) (*emptypb.Empty, error)
	CreateSocialMedia(context.Context, *CreateSocialMediaRequest) (*CreateSocialMediaResponse, error)
	UpdateSocialMedia(context.Context, *UpdateSocialMediaRequest) (*UpdateSocialMediaResponse, error)
	GetSocialMedia(context.Context, *GetSocialMediaRequest) (*GetSocialMediaResponse, error)
	DeleteSocialMedia(context.Context, *DeleteSocialMediaRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedChatServer()
}

// UnimplementedChatServer must be embedded to have forward compatible implementations.
type UnimplementedChatServer struct {
}

func (UnimplementedChatServer) CreateChatTable(context.Context, *CreateChatTableRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChatTable not implemented")
}
func (UnimplementedChatServer) CreateChatRecord(context.Context, *CreateChatRecordRequest) (*CreateChatRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChatRecord not implemented")
}
func (UnimplementedChatServer) GetChatRecord(context.Context, *GetChatRecordRequest) (*GetChatRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChatRecord not implemented")
}
func (UnimplementedChatServer) UpdateChatRecord(context.Context, *UpdateChatRecordRequest) (*UpdateChatRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChatRecord not implemented")
}
func (UnimplementedChatServer) DeleteChatTable(context.Context, *DeleteChatTableRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChatTable not implemented")
}
func (UnimplementedChatServer) GetTargetID(context.Context, *GetTargetIDRequest) (*GetTargetIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTargetID not implemented")
}
func (UnimplementedChatServer) GetLastMsg(context.Context, *GetLastMsgRequest) (*GetLastMsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastMsg not implemented")
}
func (UnimplementedChatServer) GetChatRow(context.Context, *GetChatRowRequest) (*GetChatRowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChatRow not implemented")
}
func (UnimplementedChatServer) UpdateRead(context.Context, *UpdateReadRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRead not implemented")
}
func (UnimplementedChatServer) CreateSocialMedia(context.Context, *CreateSocialMediaRequest) (*CreateSocialMediaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSocialMedia not implemented")
}
func (UnimplementedChatServer) UpdateSocialMedia(context.Context, *UpdateSocialMediaRequest) (*UpdateSocialMediaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSocialMedia not implemented")
}
func (UnimplementedChatServer) GetSocialMedia(context.Context, *GetSocialMediaRequest) (*GetSocialMediaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSocialMedia not implemented")
}
func (UnimplementedChatServer) DeleteSocialMedia(context.Context, *DeleteSocialMediaRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSocialMedia not implemented")
}
func (UnimplementedChatServer) mustEmbedUnimplementedChatServer() {}

// UnsafeChatServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatServer will
// result in compilation errors.
type UnsafeChatServer interface {
	mustEmbedUnimplementedChatServer()
}

func RegisterChatServer(s grpc.ServiceRegistrar, srv ChatServer) {
	s.RegisterService(&Chat_ServiceDesc, srv)
}

func _Chat_CreateChatTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChatTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).CreateChatTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_CreateChatTable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).CreateChatTable(ctx, req.(*CreateChatTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_CreateChatRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChatRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).CreateChatRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_CreateChatRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).CreateChatRecord(ctx, req.(*CreateChatRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_GetChatRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChatRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).GetChatRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_GetChatRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).GetChatRecord(ctx, req.(*GetChatRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_UpdateChatRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateChatRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).UpdateChatRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_UpdateChatRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).UpdateChatRecord(ctx, req.(*UpdateChatRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_DeleteChatTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteChatTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).DeleteChatTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_DeleteChatTable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).DeleteChatTable(ctx, req.(*DeleteChatTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_GetTargetID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTargetIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).GetTargetID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_GetTargetID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).GetTargetID(ctx, req.(*GetTargetIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_GetLastMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLastMsgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).GetLastMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_GetLastMsg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).GetLastMsg(ctx, req.(*GetLastMsgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_GetChatRow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChatRowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).GetChatRow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_GetChatRow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).GetChatRow(ctx, req.(*GetChatRowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_UpdateRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).UpdateRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_UpdateRead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).UpdateRead(ctx, req.(*UpdateReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_CreateSocialMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSocialMediaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).CreateSocialMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_CreateSocialMedia_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).CreateSocialMedia(ctx, req.(*CreateSocialMediaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_UpdateSocialMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSocialMediaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).UpdateSocialMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_UpdateSocialMedia_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).UpdateSocialMedia(ctx, req.(*UpdateSocialMediaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_GetSocialMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSocialMediaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).GetSocialMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_GetSocialMedia_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).GetSocialMedia(ctx, req.(*GetSocialMediaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_DeleteSocialMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSocialMediaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).DeleteSocialMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_DeleteSocialMedia_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).DeleteSocialMedia(ctx, req.(*DeleteSocialMediaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Chat_ServiceDesc is the grpc.ServiceDesc for Chat service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Chat_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Chat",
	HandlerType: (*ChatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateChatTable",
			Handler:    _Chat_CreateChatTable_Handler,
		},
		{
			MethodName: "CreateChatRecord",
			Handler:    _Chat_CreateChatRecord_Handler,
		},
		{
			MethodName: "GetChatRecord",
			Handler:    _Chat_GetChatRecord_Handler,
		},
		{
			MethodName: "UpdateChatRecord",
			Handler:    _Chat_UpdateChatRecord_Handler,
		},
		{
			MethodName: "DeleteChatTable",
			Handler:    _Chat_DeleteChatTable_Handler,
		},
		{
			MethodName: "GetTargetID",
			Handler:    _Chat_GetTargetID_Handler,
		},
		{
			MethodName: "GetLastMsg",
			Handler:    _Chat_GetLastMsg_Handler,
		},
		{
			MethodName: "GetChatRow",
			Handler:    _Chat_GetChatRow_Handler,
		},
		{
			MethodName: "UpdateRead",
			Handler:    _Chat_UpdateRead_Handler,
		},
		{
			MethodName: "CreateSocialMedia",
			Handler:    _Chat_CreateSocialMedia_Handler,
		},
		{
			MethodName: "UpdateSocialMedia",
			Handler:    _Chat_UpdateSocialMedia_Handler,
		},
		{
			MethodName: "GetSocialMedia",
			Handler:    _Chat_GetSocialMedia_Handler,
		},
		{
			MethodName: "DeleteSocialMedia",
			Handler:    _Chat_DeleteSocialMedia_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_Backend.proto",
}
